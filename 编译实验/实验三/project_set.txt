I0:
program' -> ， program   , $
program -> ， block .   , $
block -> ， const-decl var-decl proc-decl statement   , .
const-decl -> ， const const-assignment-list ;   , var
const-decl -> ， const const-assignment-list ;   , procedure
const-decl -> ， const const-assignment-list ;   , ident
const-decl -> ， const const-assignment-list ;   , call
const-decl -> ， const const-assignment-list ;   , begin
const-decl -> ， const const-assignment-list ;   , if
const-decl -> ， const const-assignment-list ;   , while
const-decl -> ， const const-assignment-list ;   , .
const-decl -> ， ε   , var
const-decl -> ， ε   , procedure
const-decl -> ， ε   , ident
const-decl -> ， ε   , call
const-decl -> ， ε   , begin
const-decl -> ， ε   , if
const-decl -> ， ε   , while
const-decl -> ， ε   , .

I1:
program' -> program ，   , $

I2:
program -> block ， .   , $

I3:
block -> const-decl ， var-decl proc-decl statement   , .
var-decl -> ， var ident-list ;   , procedure
var-decl -> ， var ident-list ;   , ident
var-decl -> ， var ident-list ;   , call
var-decl -> ， var ident-list ;   , begin
var-decl -> ， var ident-list ;   , if
var-decl -> ， var ident-list ;   , while
var-decl -> ， var ident-list ;   , .
var-decl -> ， ε   , procedure
var-decl -> ， ε   , ident
var-decl -> ， ε   , call
var-decl -> ， ε   , begin
var-decl -> ， ε   , if
var-decl -> ， ε   , while
var-decl -> ， ε   , .

I4:
const-decl -> const ， const-assignment-list ;   , var
const-decl -> const ， const-assignment-list ;   , procedure
const-decl -> const ， const-assignment-list ;   , ident
const-decl -> const ， const-assignment-list ;   , call
const-decl -> const ， const-assignment-list ;   , begin
const-decl -> const ， const-assignment-list ;   , if
const-decl -> const ， const-assignment-list ;   , while
const-decl -> const ， const-assignment-list ;   , .
const-assignment-list -> ， ident = number   , ;
const-assignment-list -> ， const-assignment-list , ident = number   , ;
const-assignment-list -> ， ident = number   , ,
const-assignment-list -> ， const-assignment-list , ident = number   , ,

I5:
program -> block . ，   , $

I6:
block -> const-decl var-decl ， proc-decl statement   , .
proc-decl -> ， proc-decl procedure ident ; block ;   , ident
proc-decl -> ， proc-decl procedure ident ; block ;   , call
proc-decl -> ， proc-decl procedure ident ; block ;   , begin
proc-decl -> ， proc-decl procedure ident ; block ;   , if
proc-decl -> ， proc-decl procedure ident ; block ;   , while
proc-decl -> ， proc-decl procedure ident ; block ;   , .
proc-decl -> ， ε   , ident
proc-decl -> ， ε   , call
proc-decl -> ， ε   , begin
proc-decl -> ， ε   , if
proc-decl -> ， ε   , while
proc-decl -> ， ε   , .
proc-decl -> ， proc-decl procedure ident ; block ;   , procedure
proc-decl -> ， ε   , procedure

I7:
var-decl -> var ， ident-list ;   , procedure
var-decl -> var ， ident-list ;   , ident
var-decl -> var ， ident-list ;   , call
var-decl -> var ， ident-list ;   , begin
var-decl -> var ， ident-list ;   , if
var-decl -> var ， ident-list ;   , while
var-decl -> var ， ident-list ;   , .
ident-list -> ， ident   , ;
ident-list -> ， ident-list , ident   , ;
ident-list -> ， ident   , ,
ident-list -> ， ident-list , ident   , ,

I8:
const-decl -> const const-assignment-list ， ;   , var
const-decl -> const const-assignment-list ， ;   , procedure
const-decl -> const const-assignment-list ， ;   , ident
const-decl -> const const-assignment-list ， ;   , call
const-decl -> const const-assignment-list ， ;   , begin
const-decl -> const const-assignment-list ， ;   , if
const-decl -> const const-assignment-list ， ;   , while
const-decl -> const const-assignment-list ， ;   , .
const-assignment-list -> const-assignment-list ， , ident = number   , ;
const-assignment-list -> const-assignment-list ， , ident = number   , ,

I9:
const-assignment-list -> ident ， = number   , ;
const-assignment-list -> ident ， = number   , ,

I10:
block -> const-decl var-decl proc-decl ， statement   , .
proc-decl -> proc-decl ， procedure ident ; block ;   , ident
proc-decl -> proc-decl ， procedure ident ; block ;   , call
proc-decl -> proc-decl ， procedure ident ; block ;   , begin
proc-decl -> proc-decl ， procedure ident ; block ;   , if
proc-decl -> proc-decl ， procedure ident ; block ;   , while
proc-decl -> proc-decl ， procedure ident ; block ;   , .
proc-decl -> proc-decl ， procedure ident ; block ;   , procedure
statement -> ， ident := expression   , .
statement -> ， call ident   , .
statement -> ， begin statement-list end   , .
statement -> ， if condition then M statement M   , .
statement -> ， while M condition M do statement M   , .
statement -> ， ε   , .

I11:
ident-list -> ident ，   , ;
ident-list -> ident ，   , ,

I12:
var-decl -> var ident-list ， ;   , procedure
var-decl -> var ident-list ， ;   , ident
var-decl -> var ident-list ， ;   , call
var-decl -> var ident-list ， ;   , begin
var-decl -> var ident-list ， ;   , if
var-decl -> var ident-list ， ;   , while
var-decl -> var ident-list ， ;   , .
ident-list -> ident-list ， , ident   , ;
ident-list -> ident-list ， , ident   , ,

I13:
const-decl -> const const-assignment-list ; ，   , var
const-decl -> const const-assignment-list ; ，   , procedure
const-decl -> const const-assignment-list ; ，   , ident
const-decl -> const const-assignment-list ; ，   , call
const-decl -> const const-assignment-list ; ，   , begin
const-decl -> const const-assignment-list ; ，   , if
const-decl -> const const-assignment-list ; ，   , while
const-decl -> const const-assignment-list ; ，   , .

I14:
const-assignment-list -> const-assignment-list , ， ident = number   , ;
const-assignment-list -> const-assignment-list , ， ident = number   , ,

I15:
const-assignment-list -> ident = ， number   , ;
const-assignment-list -> ident = ， number   , ,

I16:
block -> const-decl var-decl proc-decl statement ，   , .

I17:
statement -> ident ， := expression   , .

I18:
proc-decl -> proc-decl procedure ， ident ; block ;   , ident
proc-decl -> proc-decl procedure ， ident ; block ;   , call
proc-decl -> proc-decl procedure ， ident ; block ;   , begin
proc-decl -> proc-decl procedure ， ident ; block ;   , if
proc-decl -> proc-decl procedure ， ident ; block ;   , while
proc-decl -> proc-decl procedure ， ident ; block ;   , .
proc-decl -> proc-decl procedure ， ident ; block ;   , procedure

I19:
statement -> call ， ident   , .

I20:
statement -> begin ， statement-list end   , .
statement-list -> ， statement   , end
statement-list -> ， statement-list ; statement   , end
statement -> ， ident := expression   , end
statement -> ， call ident   , end
statement -> ， begin statement-list end   , end
statement -> ， if condition then M statement M   , end
statement -> ， while M condition M do statement M   , end
statement -> ， ε   , end
statement-list -> ， statement   , ;
statement-list -> ， statement-list ; statement   , ;
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I21:
statement -> if ， condition then M statement M   , .
condition -> ， expression relation expression   , then
condition -> ， odd expression   , then
expression -> ， term   , =
expression -> ， term   , <>
expression -> ， term   , <
expression -> ， term   , >
expression -> ， term   , <=
expression -> ， term   , >=
expression -> ， adding-operator term   , =
expression -> ， adding-operator term   , <>
expression -> ， adding-operator term   , <
expression -> ， adding-operator term   , >
expression -> ， adding-operator term   , <=
expression -> ， adding-operator term   , >=
expression -> ， expression adding-operator term   , =
expression -> ， expression adding-operator term   , <>
expression -> ， expression adding-operator term   , <
expression -> ， expression adding-operator term   , >
expression -> ， expression adding-operator term   , <=
expression -> ， expression adding-operator term   , >=
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I22:
statement -> while ， M condition M do statement M   , .
M -> ， ε   , ident
M -> ， ε   , number
M -> ， ε   , odd
M -> ， ε   , +
M -> ， ε   , -
M -> ， ε   , (

I23:
var-decl -> var ident-list ; ，   , procedure
var-decl -> var ident-list ; ，   , ident
var-decl -> var ident-list ; ，   , call
var-decl -> var ident-list ; ，   , begin
var-decl -> var ident-list ; ，   , if
var-decl -> var ident-list ; ，   , while
var-decl -> var ident-list ; ，   , .

I24:
ident-list -> ident-list , ， ident   , ;
ident-list -> ident-list , ， ident   , ,

I25:
const-assignment-list -> const-assignment-list , ident ， = number   , ;
const-assignment-list -> const-assignment-list , ident ， = number   , ,

I26:
const-assignment-list -> ident = number ，   , ;
const-assignment-list -> ident = number ，   , ,

I27:
statement -> ident := ， expression   , .
expression -> ， term   , .
expression -> ， adding-operator term   , .
expression -> ， expression adding-operator term   , .
term -> ， factor   , .
term -> ， term multiplying-operator factor   , .
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , .
factor -> ， number   , .
factor -> ， ( expression )   , .
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I28:
proc-decl -> proc-decl procedure ident ， ; block ;   , ident
proc-decl -> proc-decl procedure ident ， ; block ;   , call
proc-decl -> proc-decl procedure ident ， ; block ;   , begin
proc-decl -> proc-decl procedure ident ， ; block ;   , if
proc-decl -> proc-decl procedure ident ， ; block ;   , while
proc-decl -> proc-decl procedure ident ， ; block ;   , .
proc-decl -> proc-decl procedure ident ， ; block ;   , procedure

I29:
statement -> call ident ，   , .

I30:
statement-list -> statement ，   , end
statement-list -> statement ，   , ;

I31:
statement -> ident ， := expression   , end
statement -> ident ， := expression   , ;

I32:
statement -> call ， ident   , end
statement -> call ， ident   , ;

I33:
statement -> begin ， statement-list end   , end
statement -> begin ， statement-list end   , ;
statement-list -> ， statement   , end
statement-list -> ， statement-list ; statement   , end
statement -> ， ident := expression   , end
statement -> ， call ident   , end
statement -> ， begin statement-list end   , end
statement -> ， if condition then M statement M   , end
statement -> ， while M condition M do statement M   , end
statement -> ， ε   , end
statement-list -> ， statement   , ;
statement-list -> ， statement-list ; statement   , ;
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I34:
statement -> begin statement-list ， end   , .
statement-list -> statement-list ， ; statement   , end
statement-list -> statement-list ， ; statement   , ;

I35:
statement -> if ， condition then M statement M   , end
statement -> if ， condition then M statement M   , ;
condition -> ， expression relation expression   , then
condition -> ， odd expression   , then
expression -> ， term   , =
expression -> ， term   , <>
expression -> ， term   , <
expression -> ， term   , >
expression -> ， term   , <=
expression -> ， term   , >=
expression -> ， adding-operator term   , =
expression -> ， adding-operator term   , <>
expression -> ， adding-operator term   , <
expression -> ， adding-operator term   , >
expression -> ， adding-operator term   , <=
expression -> ， adding-operator term   , >=
expression -> ， expression adding-operator term   , =
expression -> ， expression adding-operator term   , <>
expression -> ， expression adding-operator term   , <
expression -> ， expression adding-operator term   , >
expression -> ， expression adding-operator term   , <=
expression -> ， expression adding-operator term   , >=
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I36:
statement -> while ， M condition M do statement M   , end
statement -> while ， M condition M do statement M   , ;
M -> ， ε   , ident
M -> ， ε   , number
M -> ， ε   , odd
M -> ， ε   , +
M -> ， ε   , -
M -> ， ε   , (

I37:
factor -> ident ，   , =
factor -> ident ，   , <>
factor -> ident ，   , <
factor -> ident ，   , >
factor -> ident ，   , <=
factor -> ident ，   , >=
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I38:
factor -> number ，   , =
factor -> number ，   , <>
factor -> number ，   , <
factor -> number ，   , >
factor -> number ，   , <=
factor -> number ，   , >=
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I39:
condition -> expression ， relation expression   , then
expression -> expression ， adding-operator term   , =
expression -> expression ， adding-operator term   , <>
expression -> expression ， adding-operator term   , <
expression -> expression ， adding-operator term   , >
expression -> expression ， adding-operator term   , <=
expression -> expression ， adding-operator term   , >=
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
relation -> ， =   , ident
relation -> ， =   , number
relation -> ， =   , +
relation -> ， =   , -
relation -> ， =   , (
relation -> ， <>   , ident
relation -> ， <>   , number
relation -> ， <>   , +
relation -> ， <>   , -
relation -> ， <>   , (
relation -> ， <   , ident
relation -> ， <   , number
relation -> ， <   , +
relation -> ， <   , -
relation -> ， <   , (
relation -> ， >   , ident
relation -> ， >   , number
relation -> ， >   , +
relation -> ， >   , -
relation -> ， >   , (
relation -> ， <=   , ident
relation -> ， <=   , number
relation -> ， <=   , +
relation -> ， <=   , -
relation -> ， <=   , (
relation -> ， >=   , ident
relation -> ， >=   , number
relation -> ， >=   , +
relation -> ， >=   , -
relation -> ， >=   , (
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I40:
statement -> if condition ， then M statement M   , .

I41:
condition -> odd ， expression   , then
expression -> ， term   , then
expression -> ， adding-operator term   , then
expression -> ， expression adding-operator term   , then
term -> ， factor   , then
term -> ， term multiplying-operator factor   , then
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , then
factor -> ， number   , then
factor -> ， ( expression )   , then
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I42:
expression -> term ，   , =
expression -> term ，   , <>
expression -> term ，   , <
expression -> term ，   , >
expression -> term ，   , <=
expression -> term ，   , >=
term -> term ， multiplying-operator factor   , =
term -> term ， multiplying-operator factor   , <>
term -> term ， multiplying-operator factor   , <
term -> term ， multiplying-operator factor   , >
term -> term ， multiplying-operator factor   , <=
term -> term ， multiplying-operator factor   , >=
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I43:
expression -> adding-operator ， term   , =
expression -> adding-operator ， term   , <>
expression -> adding-operator ， term   , <
expression -> adding-operator ， term   , >
expression -> adding-operator ， term   , <=
expression -> adding-operator ， term   , >=
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I44:
adding-operator -> + ，   , ident
adding-operator -> + ，   , number
adding-operator -> + ，   , (

I45:
adding-operator -> - ，   , ident
adding-operator -> - ，   , number
adding-operator -> - ，   , (

I46:
term -> factor ，   , =
term -> factor ，   , <>
term -> factor ，   , <
term -> factor ，   , >
term -> factor ，   , <=
term -> factor ，   , >=
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I47:
factor -> ( ， expression )   , =
factor -> ( ， expression )   , <>
factor -> ( ， expression )   , <
factor -> ( ， expression )   , >
factor -> ( ， expression )   , <=
factor -> ( ， expression )   , >=
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I48:
statement -> while M ， condition M do statement M   , .
condition -> ， expression relation expression   , do
condition -> ， odd expression   , do
expression -> ， term   , =
expression -> ， term   , <>
expression -> ， term   , <
expression -> ， term   , >
expression -> ， term   , <=
expression -> ， term   , >=
expression -> ， adding-operator term   , =
expression -> ， adding-operator term   , <>
expression -> ， adding-operator term   , <
expression -> ， adding-operator term   , >
expression -> ， adding-operator term   , <=
expression -> ， adding-operator term   , >=
expression -> ， expression adding-operator term   , =
expression -> ， expression adding-operator term   , <>
expression -> ， expression adding-operator term   , <
expression -> ， expression adding-operator term   , >
expression -> ， expression adding-operator term   , <=
expression -> ， expression adding-operator term   , >=
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I49:
ident-list -> ident-list , ident ，   , ;
ident-list -> ident-list , ident ，   , ,

I50:
const-assignment-list -> const-assignment-list , ident = ， number   , ;
const-assignment-list -> const-assignment-list , ident = ， number   , ,

I51:
factor -> ident ，   , .
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I52:
factor -> number ，   , .
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I53:
statement -> ident := expression ，   , .
expression -> expression ， adding-operator term   , .
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I54:
expression -> term ，   , .
term -> term ， multiplying-operator factor   , .
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I55:
expression -> adding-operator ， term   , .
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , .
term -> ， term multiplying-operator factor   , .
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , .
factor -> ， number   , .
factor -> ， ( expression )   , .
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I56:
term -> factor ，   , .
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I57:
factor -> ( ， expression )   , .
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I58:
proc-decl -> proc-decl procedure ident ; ， block ;   , ident
proc-decl -> proc-decl procedure ident ; ， block ;   , call
proc-decl -> proc-decl procedure ident ; ， block ;   , begin
proc-decl -> proc-decl procedure ident ; ， block ;   , if
proc-decl -> proc-decl procedure ident ; ， block ;   , while
proc-decl -> proc-decl procedure ident ; ， block ;   , .
proc-decl -> proc-decl procedure ident ; ， block ;   , procedure
block -> ， const-decl var-decl proc-decl statement   , ;
const-decl -> ， const const-assignment-list ;   , var
const-decl -> ， const const-assignment-list ;   , procedure
const-decl -> ， const const-assignment-list ;   , ident
const-decl -> ， const const-assignment-list ;   , call
const-decl -> ， const const-assignment-list ;   , begin
const-decl -> ， const const-assignment-list ;   , if
const-decl -> ， const const-assignment-list ;   , while
const-decl -> ， const const-assignment-list ;   , ;
const-decl -> ， ε   , var
const-decl -> ， ε   , procedure
const-decl -> ， ε   , ident
const-decl -> ， ε   , call
const-decl -> ， ε   , begin
const-decl -> ， ε   , if
const-decl -> ， ε   , while
const-decl -> ， ε   , ;

I59:
statement -> ident := ， expression   , end
statement -> ident := ， expression   , ;
expression -> ， term   , end
expression -> ， adding-operator term   , end
expression -> ， expression adding-operator term   , end
expression -> ， term   , ;
expression -> ， adding-operator term   , ;
expression -> ， expression adding-operator term   , ;
term -> ， factor   , end
term -> ， term multiplying-operator factor   , end
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
term -> ， factor   , ;
term -> ， term multiplying-operator factor   , ;
factor -> ， ident   , end
factor -> ， number   , end
factor -> ， ( expression )   , end
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I60:
statement -> call ident ，   , end
statement -> call ident ，   , ;

I61:
statement -> begin statement-list ， end   , end
statement -> begin statement-list ， end   , ;
statement-list -> statement-list ， ; statement   , end
statement-list -> statement-list ， ; statement   , ;

I62:
statement-list -> statement-list ; ， statement   , end
statement-list -> statement-list ; ， statement   , ;
statement -> ， ident := expression   , end
statement -> ， call ident   , end
statement -> ， begin statement-list end   , end
statement -> ， if condition then M statement M   , end
statement -> ， while M condition M do statement M   , end
statement -> ， ε   , end
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I63:
statement -> begin statement-list end ，   , .

I64:
statement -> if condition ， then M statement M   , end
statement -> if condition ， then M statement M   , ;

I65:
statement -> while M ， condition M do statement M   , end
statement -> while M ， condition M do statement M   , ;
condition -> ， expression relation expression   , do
condition -> ， odd expression   , do
expression -> ， term   , =
expression -> ， term   , <>
expression -> ， term   , <
expression -> ， term   , >
expression -> ， term   , <=
expression -> ， term   , >=
expression -> ， adding-operator term   , =
expression -> ， adding-operator term   , <>
expression -> ， adding-operator term   , <
expression -> ， adding-operator term   , >
expression -> ， adding-operator term   , <=
expression -> ， adding-operator term   , >=
expression -> ， expression adding-operator term   , =
expression -> ， expression adding-operator term   , <>
expression -> ， expression adding-operator term   , <
expression -> ， expression adding-operator term   , >
expression -> ， expression adding-operator term   , <=
expression -> ， expression adding-operator term   , >=
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I66:
relation -> = ，   , ident
relation -> = ，   , number
relation -> = ，   , +
relation -> = ，   , -
relation -> = ，   , (

I67:
condition -> expression relation ， expression   , then
expression -> ， term   , then
expression -> ， adding-operator term   , then
expression -> ， expression adding-operator term   , then
term -> ， factor   , then
term -> ， term multiplying-operator factor   , then
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , then
factor -> ， number   , then
factor -> ， ( expression )   , then
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I68:
relation -> <> ，   , ident
relation -> <> ，   , number
relation -> <> ，   , +
relation -> <> ，   , -
relation -> <> ，   , (

I69:
relation -> < ，   , ident
relation -> < ，   , number
relation -> < ，   , +
relation -> < ，   , -
relation -> < ，   , (

I70:
relation -> > ，   , ident
relation -> > ，   , number
relation -> > ，   , +
relation -> > ，   , -
relation -> > ，   , (

I71:
relation -> <= ，   , ident
relation -> <= ，   , number
relation -> <= ，   , +
relation -> <= ，   , -
relation -> <= ，   , (

I72:
relation -> >= ，   , ident
relation -> >= ，   , number
relation -> >= ，   , +
relation -> >= ，   , -
relation -> >= ，   , (

I73:
expression -> expression adding-operator ， term   , =
expression -> expression adding-operator ， term   , <>
expression -> expression adding-operator ， term   , <
expression -> expression adding-operator ， term   , >
expression -> expression adding-operator ， term   , <=
expression -> expression adding-operator ， term   , >=
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I74:
statement -> if condition then ， M statement M   , .
M -> ， ε   , ident
M -> ， ε   , call
M -> ， ε   , begin
M -> ， ε   , if
M -> ， ε   , while
M -> ， ε   , .

I75:
factor -> ident ，   , then
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I76:
factor -> number ，   , then
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I77:
condition -> odd expression ，   , then
expression -> expression ， adding-operator term   , then
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I78:
expression -> term ，   , then
term -> term ， multiplying-operator factor   , then
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I79:
expression -> adding-operator ， term   , then
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , then
term -> ， term multiplying-operator factor   , then
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , then
factor -> ， number   , then
factor -> ， ( expression )   , then
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I80:
term -> factor ，   , then
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I81:
factor -> ( ， expression )   , then
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I82:
term -> term multiplying-operator ， factor   , =
term -> term multiplying-operator ， factor   , <>
term -> term multiplying-operator ， factor   , <
term -> term multiplying-operator ， factor   , >
term -> term multiplying-operator ， factor   , <=
term -> term multiplying-operator ， factor   , >=
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I83:
multiplying-operator -> * ，   , ident
multiplying-operator -> * ，   , number
multiplying-operator -> * ，   , (

I84:
multiplying-operator -> / ，   , ident
multiplying-operator -> / ，   , number
multiplying-operator -> / ，   , (

I85:
expression -> adding-operator term ，   , =
expression -> adding-operator term ，   , <>
expression -> adding-operator term ，   , <
expression -> adding-operator term ，   , >
expression -> adding-operator term ，   , <=
expression -> adding-operator term ，   , >=
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , =
term -> term ， multiplying-operator factor   , <>
term -> term ， multiplying-operator factor   , <
term -> term ， multiplying-operator factor   , >
term -> term ， multiplying-operator factor   , <=
term -> term ， multiplying-operator factor   , >=
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I86:
factor -> ident ，   , )
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I87:
factor -> number ，   , )
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I88:
factor -> ( expression ， )   , =
factor -> ( expression ， )   , <>
factor -> ( expression ， )   , <
factor -> ( expression ， )   , >
factor -> ( expression ， )   , <=
factor -> ( expression ， )   , >=
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I89:
expression -> term ，   , )
term -> term ， multiplying-operator factor   , )
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I90:
expression -> adding-operator ， term   , )
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I91:
term -> factor ，   , )
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I92:
factor -> ( ， expression )   , )
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I93:
condition -> expression ， relation expression   , do
expression -> expression ， adding-operator term   , =
expression -> expression ， adding-operator term   , <>
expression -> expression ， adding-operator term   , <
expression -> expression ， adding-operator term   , >
expression -> expression ， adding-operator term   , <=
expression -> expression ， adding-operator term   , >=
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
relation -> ， =   , ident
relation -> ， =   , number
relation -> ， =   , +
relation -> ， =   , -
relation -> ， =   , (
relation -> ， <>   , ident
relation -> ， <>   , number
relation -> ， <>   , +
relation -> ， <>   , -
relation -> ， <>   , (
relation -> ， <   , ident
relation -> ， <   , number
relation -> ， <   , +
relation -> ， <   , -
relation -> ， <   , (
relation -> ， >   , ident
relation -> ， >   , number
relation -> ， >   , +
relation -> ， >   , -
relation -> ， >   , (
relation -> ， <=   , ident
relation -> ， <=   , number
relation -> ， <=   , +
relation -> ， <=   , -
relation -> ， <=   , (
relation -> ， >=   , ident
relation -> ， >=   , number
relation -> ， >=   , +
relation -> ， >=   , -
relation -> ， >=   , (
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I94:
statement -> while M condition ， M do statement M   , .
M -> ， ε   , do

I95:
condition -> odd ， expression   , do
expression -> ， term   , do
expression -> ， adding-operator term   , do
expression -> ， expression adding-operator term   , do
term -> ， factor   , do
term -> ， term multiplying-operator factor   , do
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , do
factor -> ， number   , do
factor -> ， ( expression )   , do
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I96:
const-assignment-list -> const-assignment-list , ident = number ，   , ;
const-assignment-list -> const-assignment-list , ident = number ，   , ,

I97:
expression -> expression adding-operator ， term   , .
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , .
term -> ， term multiplying-operator factor   , .
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , .
factor -> ， number   , .
factor -> ， ( expression )   , .
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I98:
term -> term multiplying-operator ， factor   , .
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , .
factor -> ， number   , .
factor -> ， ( expression )   , .
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I99:
expression -> adding-operator term ，   , .
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , .
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I100:
factor -> ( expression ， )   , .
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I101:
proc-decl -> proc-decl procedure ident ; block ， ;   , ident
proc-decl -> proc-decl procedure ident ; block ， ;   , call
proc-decl -> proc-decl procedure ident ; block ， ;   , begin
proc-decl -> proc-decl procedure ident ; block ， ;   , if
proc-decl -> proc-decl procedure ident ; block ， ;   , while
proc-decl -> proc-decl procedure ident ; block ， ;   , .
proc-decl -> proc-decl procedure ident ; block ， ;   , procedure

I102:
block -> const-decl ， var-decl proc-decl statement   , ;
var-decl -> ， var ident-list ;   , procedure
var-decl -> ， var ident-list ;   , ident
var-decl -> ， var ident-list ;   , call
var-decl -> ， var ident-list ;   , begin
var-decl -> ， var ident-list ;   , if
var-decl -> ， var ident-list ;   , while
var-decl -> ， var ident-list ;   , ;
var-decl -> ， ε   , procedure
var-decl -> ， ε   , ident
var-decl -> ， ε   , call
var-decl -> ， ε   , begin
var-decl -> ， ε   , if
var-decl -> ， ε   , while
var-decl -> ， ε   , ;

I103:
const-decl -> const ， const-assignment-list ;   , var
const-decl -> const ， const-assignment-list ;   , procedure
const-decl -> const ， const-assignment-list ;   , ident
const-decl -> const ， const-assignment-list ;   , call
const-decl -> const ， const-assignment-list ;   , begin
const-decl -> const ， const-assignment-list ;   , if
const-decl -> const ， const-assignment-list ;   , while
const-decl -> const ， const-assignment-list ;   , ;
const-assignment-list -> ， ident = number   , ;
const-assignment-list -> ， const-assignment-list , ident = number   , ;
const-assignment-list -> ， ident = number   , ,
const-assignment-list -> ， const-assignment-list , ident = number   , ,

I104:
factor -> ident ，   , end
factor -> ident ，   , ;
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I105:
factor -> number ，   , end
factor -> number ，   , ;
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I106:
statement -> ident := expression ，   , end
statement -> ident := expression ，   , ;
expression -> expression ， adding-operator term   , end
expression -> expression ， adding-operator term   , ;
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I107:
expression -> term ，   , end
expression -> term ，   , ;
term -> term ， multiplying-operator factor   , end
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , ;
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I108:
expression -> adding-operator ， term   , end
expression -> adding-operator ， term   , ;
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , end
term -> ， term multiplying-operator factor   , end
term -> ， factor   , ;
term -> ， term multiplying-operator factor   , ;
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , end
factor -> ， number   , end
factor -> ， ( expression )   , end
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I109:
term -> factor ，   , end
term -> factor ，   , ;
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I110:
factor -> ( ， expression )   , end
factor -> ( ， expression )   , ;
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I111:
statement -> begin statement-list end ，   , end
statement -> begin statement-list end ，   , ;

I112:
statement-list -> statement-list ; statement ，   , end
statement-list -> statement-list ; statement ，   , ;

I113:
statement -> if condition then ， M statement M   , end
statement -> if condition then ， M statement M   , ;
M -> ， ε   , ident
M -> ， ε   , call
M -> ， ε   , begin
M -> ， ε   , if
M -> ， ε   , while
M -> ， ε   , end
M -> ， ε   , ;

I114:
statement -> while M condition ， M do statement M   , end
statement -> while M condition ， M do statement M   , ;
M -> ， ε   , do

I115:
condition -> expression relation expression ，   , then
expression -> expression ， adding-operator term   , then
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I116:
expression -> expression adding-operator term ，   , =
expression -> expression adding-operator term ，   , <>
expression -> expression adding-operator term ，   , <
expression -> expression adding-operator term ，   , >
expression -> expression adding-operator term ，   , <=
expression -> expression adding-operator term ，   , >=
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , =
term -> term ， multiplying-operator factor   , <>
term -> term ， multiplying-operator factor   , <
term -> term ， multiplying-operator factor   , >
term -> term ， multiplying-operator factor   , <=
term -> term ， multiplying-operator factor   , >=
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I117:
statement -> if condition then M ， statement M   , .
statement -> ， ident := expression   , .
statement -> ， call ident   , .
statement -> ， begin statement-list end   , .
statement -> ， if condition then M statement M   , .
statement -> ， while M condition M do statement M   , .
statement -> ， ε   , .

I118:
expression -> expression adding-operator ， term   , then
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , then
term -> ， term multiplying-operator factor   , then
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , then
factor -> ， number   , then
factor -> ， ( expression )   , then
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I119:
term -> term multiplying-operator ， factor   , then
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , then
factor -> ， number   , then
factor -> ， ( expression )   , then
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I120:
expression -> adding-operator term ，   , then
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , then
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I121:
factor -> ( expression ， )   , then
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I122:
term -> term multiplying-operator factor ，   , =
term -> term multiplying-operator factor ，   , <>
term -> term multiplying-operator factor ，   , <
term -> term multiplying-operator factor ，   , >
term -> term multiplying-operator factor ，   , <=
term -> term multiplying-operator factor ，   , >=
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I123:
expression -> expression adding-operator ， term   , )
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I124:
factor -> ( expression ) ，   , =
factor -> ( expression ) ，   , <>
factor -> ( expression ) ，   , <
factor -> ( expression ) ，   , >
factor -> ( expression ) ，   , <=
factor -> ( expression ) ，   , >=
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I125:
term -> term multiplying-operator ， factor   , )
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I126:
expression -> adding-operator term ，   , )
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , )
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I127:
factor -> ( expression ， )   , )
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I128:
condition -> expression relation ， expression   , do
expression -> ， term   , do
expression -> ， adding-operator term   , do
expression -> ， expression adding-operator term   , do
term -> ， factor   , do
term -> ， term multiplying-operator factor   , do
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , do
factor -> ， number   , do
factor -> ， ( expression )   , do
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I129:
statement -> while M condition M ， do statement M   , .

I130:
factor -> ident ，   , do
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I131:
factor -> number ，   , do
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I132:
condition -> odd expression ，   , do
expression -> expression ， adding-operator term   , do
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I133:
expression -> term ，   , do
term -> term ， multiplying-operator factor   , do
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I134:
expression -> adding-operator ， term   , do
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , do
term -> ， term multiplying-operator factor   , do
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , do
factor -> ， number   , do
factor -> ， ( expression )   , do
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I135:
term -> factor ，   , do
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I136:
factor -> ( ， expression )   , do
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I137:
expression -> expression adding-operator term ，   , .
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , .
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I138:
term -> term multiplying-operator factor ，   , .
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I139:
factor -> ( expression ) ，   , .
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I140:
proc-decl -> proc-decl procedure ident ; block ; ，   , ident
proc-decl -> proc-decl procedure ident ; block ; ，   , call
proc-decl -> proc-decl procedure ident ; block ; ，   , begin
proc-decl -> proc-decl procedure ident ; block ; ，   , if
proc-decl -> proc-decl procedure ident ; block ; ，   , while
proc-decl -> proc-decl procedure ident ; block ; ，   , .
proc-decl -> proc-decl procedure ident ; block ; ，   , procedure

I141:
block -> const-decl var-decl ， proc-decl statement   , ;
proc-decl -> ， proc-decl procedure ident ; block ;   , ident
proc-decl -> ， proc-decl procedure ident ; block ;   , call
proc-decl -> ， proc-decl procedure ident ; block ;   , begin
proc-decl -> ， proc-decl procedure ident ; block ;   , if
proc-decl -> ， proc-decl procedure ident ; block ;   , while
proc-decl -> ， proc-decl procedure ident ; block ;   , ;
proc-decl -> ， ε   , ident
proc-decl -> ， ε   , call
proc-decl -> ， ε   , begin
proc-decl -> ， ε   , if
proc-decl -> ， ε   , while
proc-decl -> ， ε   , ;
proc-decl -> ， proc-decl procedure ident ; block ;   , procedure
proc-decl -> ， ε   , procedure

I142:
var-decl -> var ， ident-list ;   , procedure
var-decl -> var ， ident-list ;   , ident
var-decl -> var ， ident-list ;   , call
var-decl -> var ， ident-list ;   , begin
var-decl -> var ， ident-list ;   , if
var-decl -> var ， ident-list ;   , while
var-decl -> var ， ident-list ;   , ;
ident-list -> ， ident   , ;
ident-list -> ， ident-list , ident   , ;
ident-list -> ， ident   , ,
ident-list -> ， ident-list , ident   , ,

I143:
const-decl -> const const-assignment-list ， ;   , var
const-decl -> const const-assignment-list ， ;   , procedure
const-decl -> const const-assignment-list ， ;   , ident
const-decl -> const const-assignment-list ， ;   , call
const-decl -> const const-assignment-list ， ;   , begin
const-decl -> const const-assignment-list ， ;   , if
const-decl -> const const-assignment-list ， ;   , while
const-decl -> const const-assignment-list ， ;   , ;
const-assignment-list -> const-assignment-list ， , ident = number   , ;
const-assignment-list -> const-assignment-list ， , ident = number   , ,

I144:
expression -> expression adding-operator ， term   , end
expression -> expression adding-operator ， term   , ;
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , end
term -> ， term multiplying-operator factor   , end
term -> ， factor   , ;
term -> ， term multiplying-operator factor   , ;
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , end
factor -> ， number   , end
factor -> ， ( expression )   , end
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I145:
term -> term multiplying-operator ， factor   , end
term -> term multiplying-operator ， factor   , ;
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , end
factor -> ， number   , end
factor -> ， ( expression )   , end
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I146:
expression -> adding-operator term ，   , end
expression -> adding-operator term ，   , ;
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , end
term -> term ， multiplying-operator factor   , ;
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I147:
factor -> ( expression ， )   , end
factor -> ( expression ， )   , ;
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I148:
statement -> if condition then M ， statement M   , end
statement -> if condition then M ， statement M   , ;
statement -> ， ident := expression   , end
statement -> ， call ident   , end
statement -> ， begin statement-list end   , end
statement -> ， if condition then M statement M   , end
statement -> ， while M condition M do statement M   , end
statement -> ， ε   , end
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I149:
statement -> while M condition M ， do statement M   , end
statement -> while M condition M ， do statement M   , ;

I150:
statement -> if condition then M statement ， M   , .
M -> ， ε   , .

I151:
expression -> expression adding-operator term ，   , then
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , then
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I152:
term -> term multiplying-operator factor ，   , then
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I153:
factor -> ( expression ) ，   , then
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I154:
expression -> expression adding-operator term ，   , )
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , )
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I155:
term -> term multiplying-operator factor ，   , )
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I156:
factor -> ( expression ) ，   , )
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I157:
condition -> expression relation expression ，   , do
expression -> expression ， adding-operator term   , do
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I158:
statement -> while M condition M do ， statement M   , .
statement -> ， ident := expression   , .
statement -> ， call ident   , .
statement -> ， begin statement-list end   , .
statement -> ， if condition then M statement M   , .
statement -> ， while M condition M do statement M   , .
statement -> ， ε   , .

I159:
expression -> expression adding-operator ， term   , do
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , do
term -> ， term multiplying-operator factor   , do
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , do
factor -> ， number   , do
factor -> ， ( expression )   , do
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I160:
term -> term multiplying-operator ， factor   , do
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , do
factor -> ， number   , do
factor -> ， ( expression )   , do
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I161:
expression -> adding-operator term ，   , do
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , do
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I162:
factor -> ( expression ， )   , do
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I163:
block -> const-decl var-decl proc-decl ， statement   , ;
proc-decl -> proc-decl ， procedure ident ; block ;   , ident
proc-decl -> proc-decl ， procedure ident ; block ;   , call
proc-decl -> proc-decl ， procedure ident ; block ;   , begin
proc-decl -> proc-decl ， procedure ident ; block ;   , if
proc-decl -> proc-decl ， procedure ident ; block ;   , while
proc-decl -> proc-decl ， procedure ident ; block ;   , ;
proc-decl -> proc-decl ， procedure ident ; block ;   , procedure
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I164:
var-decl -> var ident-list ， ;   , procedure
var-decl -> var ident-list ， ;   , ident
var-decl -> var ident-list ， ;   , call
var-decl -> var ident-list ， ;   , begin
var-decl -> var ident-list ， ;   , if
var-decl -> var ident-list ， ;   , while
var-decl -> var ident-list ， ;   , ;
ident-list -> ident-list ， , ident   , ;
ident-list -> ident-list ， , ident   , ,

I165:
const-decl -> const const-assignment-list ; ，   , var
const-decl -> const const-assignment-list ; ，   , procedure
const-decl -> const const-assignment-list ; ，   , ident
const-decl -> const const-assignment-list ; ，   , call
const-decl -> const const-assignment-list ; ，   , begin
const-decl -> const const-assignment-list ; ，   , if
const-decl -> const const-assignment-list ; ，   , while
const-decl -> const const-assignment-list ; ，   , ;

I166:
expression -> expression adding-operator term ，   , end
expression -> expression adding-operator term ，   , ;
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , end
term -> term ， multiplying-operator factor   , ;
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I167:
term -> term multiplying-operator factor ，   , end
term -> term multiplying-operator factor ，   , ;
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I168:
factor -> ( expression ) ，   , end
factor -> ( expression ) ，   , ;
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I169:
statement -> if condition then M statement ， M   , end
statement -> if condition then M statement ， M   , ;
M -> ， ε   , end
M -> ， ε   , ;

I170:
statement -> while M condition M do ， statement M   , end
statement -> while M condition M do ， statement M   , ;
statement -> ， ident := expression   , end
statement -> ， call ident   , end
statement -> ， begin statement-list end   , end
statement -> ， if condition then M statement M   , end
statement -> ， while M condition M do statement M   , end
statement -> ， ε   , end
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I171:
statement -> if condition then M statement M ，   , .

I172:
statement -> while M condition M do statement ， M   , .
M -> ， ε   , .

I173:
expression -> expression adding-operator term ，   , do
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , do
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I174:
term -> term multiplying-operator factor ，   , do
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I175:
factor -> ( expression ) ，   , do
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I176:
block -> const-decl var-decl proc-decl statement ，   , ;

I177:
statement -> ident ， := expression   , ;

I178:
proc-decl -> proc-decl procedure ， ident ; block ;   , ident
proc-decl -> proc-decl procedure ， ident ; block ;   , call
proc-decl -> proc-decl procedure ， ident ; block ;   , begin
proc-decl -> proc-decl procedure ， ident ; block ;   , if
proc-decl -> proc-decl procedure ， ident ; block ;   , while
proc-decl -> proc-decl procedure ， ident ; block ;   , ;
proc-decl -> proc-decl procedure ， ident ; block ;   , procedure

I179:
statement -> call ， ident   , ;

I180:
statement -> begin ， statement-list end   , ;
statement-list -> ， statement   , end
statement-list -> ， statement-list ; statement   , end
statement -> ， ident := expression   , end
statement -> ， call ident   , end
statement -> ， begin statement-list end   , end
statement -> ， if condition then M statement M   , end
statement -> ， while M condition M do statement M   , end
statement -> ， ε   , end
statement-list -> ， statement   , ;
statement-list -> ， statement-list ; statement   , ;
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I181:
statement -> if ， condition then M statement M   , ;
condition -> ， expression relation expression   , then
condition -> ， odd expression   , then
expression -> ， term   , =
expression -> ， term   , <>
expression -> ， term   , <
expression -> ， term   , >
expression -> ， term   , <=
expression -> ， term   , >=
expression -> ， adding-operator term   , =
expression -> ， adding-operator term   , <>
expression -> ， adding-operator term   , <
expression -> ， adding-operator term   , >
expression -> ， adding-operator term   , <=
expression -> ， adding-operator term   , >=
expression -> ， expression adding-operator term   , =
expression -> ， expression adding-operator term   , <>
expression -> ， expression adding-operator term   , <
expression -> ， expression adding-operator term   , >
expression -> ， expression adding-operator term   , <=
expression -> ， expression adding-operator term   , >=
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I182:
statement -> while ， M condition M do statement M   , ;
M -> ， ε   , ident
M -> ， ε   , number
M -> ， ε   , odd
M -> ， ε   , +
M -> ， ε   , -
M -> ， ε   , (

I183:
var-decl -> var ident-list ; ，   , procedure
var-decl -> var ident-list ; ，   , ident
var-decl -> var ident-list ; ，   , call
var-decl -> var ident-list ; ，   , begin
var-decl -> var ident-list ; ，   , if
var-decl -> var ident-list ; ，   , while
var-decl -> var ident-list ; ，   , ;

I184:
statement -> if condition then M statement M ，   , end
statement -> if condition then M statement M ，   , ;

I185:
statement -> while M condition M do statement ， M   , end
statement -> while M condition M do statement ， M   , ;
M -> ， ε   , end
M -> ， ε   , ;

I186:
statement -> while M condition M do statement M ，   , .

I187:
statement -> ident := ， expression   , ;
expression -> ， term   , ;
expression -> ， adding-operator term   , ;
expression -> ， expression adding-operator term   , ;
term -> ， factor   , ;
term -> ， term multiplying-operator factor   , ;
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I188:
proc-decl -> proc-decl procedure ident ， ; block ;   , ident
proc-decl -> proc-decl procedure ident ， ; block ;   , call
proc-decl -> proc-decl procedure ident ， ; block ;   , begin
proc-decl -> proc-decl procedure ident ， ; block ;   , if
proc-decl -> proc-decl procedure ident ， ; block ;   , while
proc-decl -> proc-decl procedure ident ， ; block ;   , ;
proc-decl -> proc-decl procedure ident ， ; block ;   , procedure

I189:
statement -> call ident ，   , ;

I190:
statement -> begin statement-list ， end   , ;
statement-list -> statement-list ， ; statement   , end
statement-list -> statement-list ， ; statement   , ;

I191:
statement -> if condition ， then M statement M   , ;

I192:
statement -> while M ， condition M do statement M   , ;
condition -> ， expression relation expression   , do
condition -> ， odd expression   , do
expression -> ， term   , =
expression -> ， term   , <>
expression -> ， term   , <
expression -> ， term   , >
expression -> ， term   , <=
expression -> ， term   , >=
expression -> ， adding-operator term   , =
expression -> ， adding-operator term   , <>
expression -> ， adding-operator term   , <
expression -> ， adding-operator term   , >
expression -> ， adding-operator term   , <=
expression -> ， adding-operator term   , >=
expression -> ， expression adding-operator term   , =
expression -> ， expression adding-operator term   , <>
expression -> ， expression adding-operator term   , <
expression -> ， expression adding-operator term   , >
expression -> ， expression adding-operator term   , <=
expression -> ， expression adding-operator term   , >=
term -> ， factor   , =
term -> ， term multiplying-operator factor   , =
term -> ， factor   , <>
term -> ， term multiplying-operator factor   , <>
term -> ， factor   , <
term -> ， term multiplying-operator factor   , <
term -> ， factor   , >
term -> ， term multiplying-operator factor   , >
term -> ， factor   , <=
term -> ， term multiplying-operator factor   , <=
term -> ， factor   , >=
term -> ， term multiplying-operator factor   , >=
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , =
factor -> ， number   , =
factor -> ， ( expression )   , =
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , <>
factor -> ， number   , <>
factor -> ， ( expression )   , <>
factor -> ， ident   , <
factor -> ， number   , <
factor -> ， ( expression )   , <
factor -> ， ident   , >
factor -> ， number   , >
factor -> ， ( expression )   , >
factor -> ， ident   , <=
factor -> ， number   , <=
factor -> ， ( expression )   , <=
factor -> ， ident   , >=
factor -> ， number   , >=
factor -> ， ( expression )   , >=
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I193:
statement -> while M condition M do statement M ，   , end
statement -> while M condition M do statement M ，   , ;

I194:
factor -> ident ，   , ;
factor -> ident ，   , *
factor -> ident ，   , /
factor -> ident ，   , +
factor -> ident ，   , -

I195:
factor -> number ，   , ;
factor -> number ，   , *
factor -> number ，   , /
factor -> number ，   , +
factor -> number ，   , -

I196:
statement -> ident := expression ，   , ;
expression -> expression ， adding-operator term   , ;
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I197:
expression -> term ，   , ;
term -> term ， multiplying-operator factor   , ;
expression -> term ，   , +
expression -> term ，   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I198:
expression -> adding-operator ， term   , ;
expression -> adding-operator ， term   , +
expression -> adding-operator ， term   , -
term -> ， factor   , ;
term -> ， term multiplying-operator factor   , ;
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I199:
term -> factor ，   , ;
term -> factor ，   , *
term -> factor ，   , /
term -> factor ，   , +
term -> factor ，   , -

I200:
factor -> ( ， expression )   , ;
factor -> ( ， expression )   , *
factor -> ( ， expression )   , /
factor -> ( ， expression )   , +
factor -> ( ， expression )   , -
expression -> ， term   , )
expression -> ， adding-operator term   , )
expression -> ， expression adding-operator term   , )
term -> ， factor   , )
term -> ， term multiplying-operator factor   , )
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (
expression -> ， term   , +
expression -> ， term   , -
expression -> ， adding-operator term   , +
expression -> ， adding-operator term   , -
expression -> ， expression adding-operator term   , +
expression -> ， expression adding-operator term   , -
factor -> ， ident   , )
factor -> ， number   , )
factor -> ， ( expression )   , )
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I201:
proc-decl -> proc-decl procedure ident ; ， block ;   , ident
proc-decl -> proc-decl procedure ident ; ， block ;   , call
proc-decl -> proc-decl procedure ident ; ， block ;   , begin
proc-decl -> proc-decl procedure ident ; ， block ;   , if
proc-decl -> proc-decl procedure ident ; ， block ;   , while
proc-decl -> proc-decl procedure ident ; ， block ;   , ;
proc-decl -> proc-decl procedure ident ; ， block ;   , procedure
block -> ， const-decl var-decl proc-decl statement   , ;
const-decl -> ， const const-assignment-list ;   , var
const-decl -> ， const const-assignment-list ;   , procedure
const-decl -> ， const const-assignment-list ;   , ident
const-decl -> ， const const-assignment-list ;   , call
const-decl -> ， const const-assignment-list ;   , begin
const-decl -> ， const const-assignment-list ;   , if
const-decl -> ， const const-assignment-list ;   , while
const-decl -> ， const const-assignment-list ;   , ;
const-decl -> ， ε   , var
const-decl -> ， ε   , procedure
const-decl -> ， ε   , ident
const-decl -> ， ε   , call
const-decl -> ， ε   , begin
const-decl -> ， ε   , if
const-decl -> ， ε   , while
const-decl -> ， ε   , ;

I202:
statement -> begin statement-list end ，   , ;

I203:
statement -> if condition then ， M statement M   , ;
M -> ， ε   , ident
M -> ， ε   , call
M -> ， ε   , begin
M -> ， ε   , if
M -> ， ε   , while
M -> ， ε   , ;

I204:
statement -> while M condition ， M do statement M   , ;
M -> ， ε   , do

I205:
expression -> expression adding-operator ， term   , ;
expression -> expression adding-operator ， term   , +
expression -> expression adding-operator ， term   , -
term -> ， factor   , ;
term -> ， term multiplying-operator factor   , ;
term -> ， factor   , +
term -> ， term multiplying-operator factor   , +
term -> ， factor   , -
term -> ， term multiplying-operator factor   , -
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
term -> ， factor   , *
term -> ， factor   , /
term -> ， term multiplying-operator factor   , *
term -> ， term multiplying-operator factor   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /

I206:
term -> term multiplying-operator ， factor   , ;
term -> term multiplying-operator ， factor   , *
term -> term multiplying-operator ， factor   , /
term -> term multiplying-operator ， factor   , +
term -> term multiplying-operator ， factor   , -
factor -> ， ident   , ;
factor -> ， number   , ;
factor -> ， ( expression )   , ;
factor -> ， ident   , *
factor -> ， number   , *
factor -> ， ( expression )   , *
factor -> ， ident   , /
factor -> ， number   , /
factor -> ， ( expression )   , /
factor -> ， ident   , +
factor -> ， number   , +
factor -> ， ( expression )   , +
factor -> ， ident   , -
factor -> ， number   , -
factor -> ， ( expression )   , -

I207:
expression -> adding-operator term ，   , ;
expression -> adding-operator term ，   , +
expression -> adding-operator term ，   , -
term -> term ， multiplying-operator factor   , ;
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I208:
factor -> ( expression ， )   , ;
factor -> ( expression ， )   , *
factor -> ( expression ， )   , /
factor -> ( expression ， )   , +
factor -> ( expression ， )   , -
expression -> expression ， adding-operator term   , )
expression -> expression ， adding-operator term   , +
expression -> expression ， adding-operator term   , -
adding-operator -> ， +   , ident
adding-operator -> ， +   , number
adding-operator -> ， +   , (
adding-operator -> ， -   , ident
adding-operator -> ， -   , number
adding-operator -> ， -   , (

I209:
proc-decl -> proc-decl procedure ident ; block ， ;   , ident
proc-decl -> proc-decl procedure ident ; block ， ;   , call
proc-decl -> proc-decl procedure ident ; block ， ;   , begin
proc-decl -> proc-decl procedure ident ; block ， ;   , if
proc-decl -> proc-decl procedure ident ; block ， ;   , while
proc-decl -> proc-decl procedure ident ; block ， ;   , ;
proc-decl -> proc-decl procedure ident ; block ， ;   , procedure

I210:
statement -> if condition then M ， statement M   , ;
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I211:
statement -> while M condition M ， do statement M   , ;

I212:
expression -> expression adding-operator term ，   , ;
expression -> expression adding-operator term ，   , +
expression -> expression adding-operator term ，   , -
term -> term ， multiplying-operator factor   , ;
term -> term ， multiplying-operator factor   , +
term -> term ， multiplying-operator factor   , -
term -> term ， multiplying-operator factor   , *
term -> term ， multiplying-operator factor   , /
multiplying-operator -> ， *   , ident
multiplying-operator -> ， *   , number
multiplying-operator -> ， *   , (
multiplying-operator -> ， /   , ident
multiplying-operator -> ， /   , number
multiplying-operator -> ， /   , (

I213:
term -> term multiplying-operator factor ，   , ;
term -> term multiplying-operator factor ，   , *
term -> term multiplying-operator factor ，   , /
term -> term multiplying-operator factor ，   , +
term -> term multiplying-operator factor ，   , -

I214:
factor -> ( expression ) ，   , ;
factor -> ( expression ) ，   , *
factor -> ( expression ) ，   , /
factor -> ( expression ) ，   , +
factor -> ( expression ) ，   , -

I215:
proc-decl -> proc-decl procedure ident ; block ; ，   , ident
proc-decl -> proc-decl procedure ident ; block ; ，   , call
proc-decl -> proc-decl procedure ident ; block ; ，   , begin
proc-decl -> proc-decl procedure ident ; block ; ，   , if
proc-decl -> proc-decl procedure ident ; block ; ，   , while
proc-decl -> proc-decl procedure ident ; block ; ，   , ;
proc-decl -> proc-decl procedure ident ; block ; ，   , procedure

I216:
statement -> if condition then M statement ， M   , ;
M -> ， ε   , ;

I217:
statement -> while M condition M do ， statement M   , ;
statement -> ， ident := expression   , ;
statement -> ， call ident   , ;
statement -> ， begin statement-list end   , ;
statement -> ， if condition then M statement M   , ;
statement -> ， while M condition M do statement M   , ;
statement -> ， ε   , ;

I218:
statement -> if condition then M statement M ，   , ;

I219:
statement -> while M condition M do statement ， M   , ;
M -> ， ε   , ;

I220:
statement -> while M condition M do statement M ，   , ;

